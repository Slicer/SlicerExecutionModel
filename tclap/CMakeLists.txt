if(SLICER_DISABLE_FROM_UPSTREAM EQUAL "MINIMIZE_DIFFS_FROM_UPSTREAM")
cmake_minimum_required(VERSION 3.7)
endif()

project(TCLAP VERSION 1.4.0 LANGUAGES CXX)
set("PROJECT_DESCRIPTION" "A header-only templatized C++ command line parser library")
set("PROJECT_HOMEPAGE_URL" "https://sourceforge.net/projects/tclap/")

if(SLICER_DISABLE_FROM_UPSTREAM EQUAL "MINIMIZE_DIFFS_FROM_UPSTREAM")
set(CMAKE_CXX_STANDARD 98)
set(CMAKE_CXX_STANDARD_REQUIRED True)
endif()
add_definitions(-DHAVE_TCLAP_CONFIG_H)

if(SLICER_DISABLE_FROM_UPSTREAM EQUAL "MINIMIZE_DIFFS_FROM_UPSTREAM")
enable_testing()
include(CTest)
include(CPackComponent)
include(GNUInstallDirs)
include(CMakePackageConfigHelpers)
string(REPLACE "/${CMAKE_LIBRARY_ARCHITECTURE}" "" CMAKE_INSTALL_LIBDIR_ARCHIND "${CMAKE_INSTALL_LIBDIR}")
endif()
include(CheckCXXSourceCompiles)
check_cxx_source_compiles("#include <strstream>
int main() { std::istrstream iss; }" TCLAP_HAVE_STRSTREAM)

check_cxx_source_compiles("#include <sstream>
int main() { std::istringstream iss; }" TCLAP_HAVE_SSTREAM)

set(GENERATED_CONFIG_NAME "TCLAPConfig.h")
set(GENERATED_CONFIG_BUILD_DIR "${PROJECT_BINARY_DIR}/tclap")
set(GENERATED_CONFIG_BUILD_PATH "${GENERATED_CONFIG_BUILD_DIR}/${GENERATED_CONFIG_NAME}")

configure_file(config.h.in "${GENERATED_CONFIG_BUILD_PATH}")

if(SLICER_DISABLE_FROM_UPSTREAM EQUAL "MINIMIZE_DIFFS_FROM_UPSTREAM")
cpack_add_component(lib
	DISPLAY_NAME "library"
	DESCRIPTION "The header-only library"
	REQUIRED
)
endif()

add_library(TCLAP INTERFACE)
target_include_directories(TCLAP INTERFACE
  $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>
  $<BUILD_INTERFACE:${CMAKE_CURRENT_LIST_DIR}/include>
)

install(TARGETS TCLAP EXPORT TCLAP
  INCLUDES
  DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}
)
install(FILES "${GENERATED_CONFIG_BUILD_PATH}"
  DESTINATION include/tclap
  COMPONENT lib
)


if(SLICER_DISABLE_FROM_UPSTREAM EQUAL "MINIMIZE_DIFFS_FROM_UPSTREAM")
if(DOC_INSTALL_DIR)
else()
  if(WIN32)
    set(DOC_INSTALL_DIR ${CMAKE_INSTALL_PREFIX}/doc)
  else()
    set(DOC_INSTALL_DIR ${CMAKE_INSTALL_PREFIX}/share/doc/tclap)
  endif()
endif()

cpack_add_component(doc
	DISPLAY_NAME "documentation"
	DESCRIPTION "Documentation files for TCLAP"
)

option(BUILD_EXAMPLES "Build examples" ON)
option(BUILD_UNITTESTS "Build unit tests" ON)
option(BUILD_DOC "Build documentation" ON)

if(BUILD_DOC)
	add_subdirectory(docs)
endif()
if(BUILD_EXAMPLES)
	add_subdirectory(examples)
endif()
add_subdirectory(tests)
if(BUILD_UNITTESTS)
	add_subdirectory(unittests)
endif()
endif()
add_subdirectory(include/tclap)

if(SLICER_DISABLE_FROM_UPSTREAM EQUAL "MINIMIZE_DIFFS_FROM_UPSTREAM")
set(PackagingTemplatesDir "${CMAKE_CURRENT_SOURCE_DIR}/packaging")


set(CPACK_PACKAGE_NAME "${PROJECT_NAME}")
set(CPACK_PACKAGE_VENDOR "tclap developers")
set(CPACK_PACKAGE_DESCRIPTION "${PROJECT_DESCRIPTION}")
set(CPACK_DEBIAN_PACKAGE_NAME "${CPACK_PACKAGE_NAME}")
set(CPACK_RPM_PACKAGE_NAME "${CPACK_PACKAGE_NAME}")
set(CPACK_PACKAGE_HOMEPAGE_URL "${PROJECT_HOMEPAGE_URL}")
set(CPACK_PACKAGE_MAINTAINER "${CPACK_PACKAGE_VENDOR}")
set(CPACK_DEBIAN_PACKAGE_MAINTAINER "${CPACK_PACKAGE_MAINTAINER}")
set(CPACK_RESOURCE_FILE_LICENSE "${CMAKE_CURRENT_SOURCE_DIR}/COPYING")
set(CPACK_RESOURCE_FILE_README "${CMAKE_CURRENT_SOURCE_DIR}/README")

set(CPACK_DEBIAN_LIB_PACKAGE_NAME "lib${PROJECT_NAME}-dev")
set(CPACK_DEBIAN_LIB_PACKAGE_DEPENDS "libc6-dev")
set(CPACK_DEBIAN_LIB_PACKAGE_SUGGESTS "cmake, pkg-config, pkg-conf")

set(CPACK_DEBIAN_DOC_PACKAGE_NAME "${PROJECT_NAME}-dev")

set(CPACK_RPM_LIB_PACKAGE_NAME "lib${PROJECT_NAME}-devel")
set(CPACK_RPM_LIB_PACKAGE_SUGGESTS "${CPACK_DEBIAN_PACKAGE_SUGGESTS}")

set(CPACK_RPM_DOC_PACKAGE_NAME "${PROJECT_NAME}-doc")

set(CPACK_DEB_COMPONENT_INSTALL ON)
set(CPACK_RPM_COMPONENT_INSTALL ON)
set(CPACK_NSIS_COMPONENT_INSTALL ON)
set(CPACK_DEBIAN_COMPRESSION_TYPE "xz")

set(PKGCONFIG_NAME "tclap")
set(PKG_CONFIG_FILE_NAME "${CMAKE_CURRENT_BINARY_DIR}/${PKGCONFIG_NAME}.pc")
configure_file("${PackagingTemplatesDir}/pkgconfig.pc.in" "${PKG_CONFIG_FILE_NAME}" @ONLY)
install(FILES "${PKG_CONFIG_FILE_NAME}"
  DESTINATION "${CMAKE_INSTALL_LIBDIR_ARCHIND}/pkgconfig"
  COMPONENT lib
)

set(CONFIG_FILE_NAME_WITHOUT_EXT "${PROJECT_NAME}Config")
set(CMAKE_CONFIG_VERSION_FILE_NAME "${CMAKE_CURRENT_BINARY_DIR}/${CONFIG_FILE_NAME_WITHOUT_EXT}-version.cmake")
set(CMAKE_CONFIG_FILE_NAME "${CONFIG_FILE_NAME_WITHOUT_EXT}.cmake")
set(CMAKE_CONFIG_DESTINATION "${CMAKE_INSTALL_LIBDIR_ARCHIND}/cmake/${PROJECT_NAME}")

install(EXPORT TCLAP
  NAMESPACE TCLAP::
  FILE "${CMAKE_CONFIG_FILE_NAME}"
  DESTINATION "${CMAKE_CONFIG_DESTINATION}"
  COMPONENT lib
)
endif()

if(${CMAKE_VERSION} VERSION_GREATER "3.14")
	set(OPTIONAL_ARCH_INDEPENDENT "ARCH_INDEPENDENT")
endif()

if(SLICER_DISABLE_FROM_UPSTREAM EQUAL "MINIMIZE_DIFFS_FROM_UPSTREAM")
write_basic_package_version_file("${CMAKE_CONFIG_VERSION_FILE_NAME}"
    COMPATIBILITY AnyNewerVersion
    ${OPTIONAL_ARCH_INDEPENDENT}
)

install(FILES "${CMAKE_CONFIG_VERSION_FILE_NAME}"
  DESTINATION "${CMAKE_CONFIG_DESTINATION}"
  COMPONENT lib
)

include(CPack)
endif()

#  Slicer specific build configuration
# --------------------------------------------------------------------------
# Install headers
# --------------------------------------------------------------------------
if(NOT DEFINED ${PROJECT_NAME}_INSTALL_NO_DEVELOPMENT)
  set(${PROJECT_NAME}_INSTALL_NO_DEVELOPMENT ON)
endif()
if(NOT ${PROJECT_NAME}_INSTALL_NO_DEVELOPMENT)
  file(GLOB headers "${TCLAP_SOURCE_DIR}/include/tclap/*.h")
  # Note "COPYING" is a filename containing the license file
  install(
    FILES ${headers} COPYING
    DESTINATION include/tclap COMPONENT Development
    )
endif()

# --------------------------------------------------------------------------
# Install support files
# --------------------------------------------------------------------------
if(NOT ${PROJECT_NAME}_INSTALL_NO_DEVELOPMENT)
  install(FILES
    ${TCLAP_BINARY_DIR}/UseTCLAP.cmake
    ${TCLAP_BINARY_DIR}/install/TCLAPConfig.cmake
    DESTINATION lib/tclap COMPONENT Development
    )
endif()

# --------------------------------------------------------------------------
# Set INCLUDE_DIRS variable
# --------------------------------------------------------------------------
set(${PROJECT_NAME}_INCLUDE_DIRS ${CMAKE_CURRENT_SOURCE_DIR}/include
  CACHE INTERNAL "${PROJECT_NAME} include dirs" FORCE)

# --------------------------------------------------------------------------
# Configure support file
# --------------------------------------------------------------------------
include(GenerateTCLAPConfig.cmake)

configure_file(
  ${TCLAP_SOURCE_DIR}/UseTCLAP.cmake.in
  ${TCLAP_BINARY_DIR}/UseTCLAP.cmake COPYONLY
  )
